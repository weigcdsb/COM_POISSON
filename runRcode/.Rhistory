library(COMPoissonReg)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
Y <- read.csv(paste0(wd, '/ry.csv'), header = F)
X <- read.csv(paste0(wd, '/X.csv'), header = F)
newD <- read.csv(paste0(wd, '/basData.csv'), header = F)
theta <- read.csv(paste0(wd, '/theta.csv'), header = F)
x0 <- seq(0, 2*pi, length.out = 256)
CMP_mean <- matrix(NA, nrow = 256, ncol = ncol(Y))
CMP_lam <- matrix(NA, nrow = 256, ncol = ncol(Y))
CMP_nu <- matrix(NA, nrow = 256, ncol = ncol(Y))
CMP_beta <- matrix(NA, nrow = ncol(Y), ncol = ncol(X) + 1)
CMP_gamma <- matrix(NA, nrow = ncol(Y), ncol = ncol(X) + 1)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
Y <- read.csv(paste0(wd, '/ry.csv'), header = F)
X <- read.csv(paste0(wd, '/X.csv'), header = F)
newD <- read.csv(paste0(wd, '/basData.csv'), header = F)
theta <- read.csv(paste0(wd, '/theta.csv'), header = F)
x0 <- seq(0, 2*pi, length.out = 256)
CMP_mean <- matrix(NA, nrow = 256, ncol = ncol(Y))
CMP_lam <- matrix(NA, nrow = 256, ncol = ncol(Y))
CMP_nu <- matrix(NA, nrow = 256, ncol = ncol(Y))
CMP_beta <- matrix(NA, nrow = ncol(Y), ncol = ncol(X) + 1)
CMP_gamma <- matrix(NA, nrow = ncol(Y), ncol = ncol(X) + 1)
for(i in 1:ncol(Y)){
y <- Y[, i]
fitData <- data.frame(y, X)
cmpFit <- glm.cmp(y ~ .,
y ~ ., data = fitData)
CMP_beta[i, ] <- cmpFit$beta
CMP_gamma[i, ] <- cmpFit$gamma
CMP_mean[, i]<- predict(cmpFit, newdata=newD)
CMP_lam[, i] <- exp(as.matrix(cbind(1, newD)) %*% cmpFit$beta)
CMP_nu[, i] <- exp(as.matrix(cbind(1, newD)) %*% cmpFit$gamma)
}
save.image(paste0(wd, '/neuron72.RData'))
plot(CMP_beta[, 1], type = 'l')
plot(CMP_beta[, 2], type = 'l')
plot(CMP_beta[, 3], type = 'l')
plot(CMP_beta[, 4], type = 'l')
plot(CMP_beta[, 5], type = 'l')
plot(CMP_beta[, 6], type = 'l')
plot(CMP_gamma[, 1], type = 'l')
plot(CMP_gamma[, 2], type = 'l')
plot(CMP_gamma[, 3], type = 'l')
plot(CMP_gamma[, 4], type = 'l')
plot(CMP_gamma[, 5], type = 'l')
plot(CMP_gamma[, 6], type = 'l')
?dcmp
CMP_lam[, i]
ecmp(CMP_lam[, i], CMP_nu[, i])
CMP_mean[, i]
vcmp(CMP_lam[, i], CMP_nu[, i])
vcmp(CMP_lam[, i], CMP_nu[, i])/CMP_mean
vcmp(CMP_lam[, i], CMP_nu[, i])/CMP_mean[, i]
ff <- vcmp(CMP_lam[, i], CMP_nu[, i])/CMP_mean[, i]
i
ff <- vcmp(CMP_lam[, i], CMP_nu[, i])/CMP_mean[, i]
plot(theta$V1, Y[, i], xlab = 'direction', ylab = 'y',
main = paste('trial =', i), ylim = range(Y))
lines(x0, CMP_mean[, i], col = 'red', lwd = 2)
lines(x0, ff, col = 'blue', lwd = 2)
abline(h = 1)
legend('topright', legend = c('mean', 'fano'),
lwd = 2, col = c('red', 'blue'))
for(i in 1:ncol(Y)){
ff <- vcmp(CMP_lam[, i], CMP_nu[, i])/CMP_mean[, i]
# png(sprintf(paste0(wd, '/plots/img%03d.png'),i),
#     width = 600,height = 600)
plot(theta$V1, Y[, i], xlab = 'direction', ylab = 'y',
main = paste('trial =', i), ylim = range(Y))
lines(x0, CMP_mean[, i], col = 'red', lwd = 2)
lines(x0, ff, col = 'blue', lwd = 2)
abline(h = 1)
legend('topright', legend = c('mean', 'fano'),
lwd = 2, col = c('red', 'blue'))
# dev.off()
}
ff
plot(ff)
ff <- vcmp(CMP_lam[, i], CMP_nu[, i])/CMP_mean[, i]
# png(sprintf(paste0(wd, '/plots/img%03d.png'),i),
#     width = 600,height = 600)
plot(theta$V1, Y[, i], xlab = 'direction', ylab = 'y',
main = paste('trial =', i), ylim = range(Y))
lines(x0, CMP_mean[, i], col = 'red', lwd = 2)
lines(x0, ff, col = 'blue', lwd = 2)
abline(h = 1)
legend('topright', legend = c('mean', 'fano'),
lwd = 2, col = c('red', 'blue'))
# dev.off()
i <- 102
ff <- vcmp(CMP_lam[, i], CMP_nu[, i])/CMP_mean[, i]
# png(sprintf(paste0(wd, '/plots/img%03d.png'),i),
#     width = 600,height = 600)
plot(theta$V1, Y[, i], xlab = 'direction', ylab = 'y',
main = paste('trial =', i), ylim = range(Y))
lines(x0, CMP_mean[, i], col = 'red', lwd = 2)
lines(x0, ff, col = 'blue', lwd = 2)
abline(h = 1)
legend('topright', legend = c('mean', 'fano'),
lwd = 2, col = c('red', 'blue'))
# dev.off()
plot(ff)
ff
vcmp(CMP_lam[, i], CMP_nu[, i])
CMP_nu[100, i]
CMP_lam[100, i]
vcmp(CMP_lam[100, i], CMP_nu[100, i])
dcmp(0, CMP_lam[100, i], CMP_nu[100, i])
(0:100)^2
sum((0:100)^2*dcmp((0:100)^2, CMP_lam[100, i], CMP_nu[100, i]))
sum((0:100)^2*dcmp((0:100)^2, CMP_lam[100, i], CMP_nu[100, i]))-
(sum((0:100)*dcmp((0:100), CMP_lam[100, i], CMP_nu[100, i])))^2
CMP_lam[100, i]
CMP_nu[100, i]
(sum((0:100)*dcmp((0:100), CMP_lam[100, i], CMP_nu[100, i])))^2
sum((0:100)^2*dcmp((0:100)^2, CMP_lam[100, i], CMP_nu[100, i]))
(0:100)^2
dcmp((0:100)^2, CMP_lam[100, i], CMP_nu[100, i])
CMP_lam[100, i]
CMP_nu[100, i]
vcmp(CMP_lam[100, i], CMP_nu[100, i])
plot(dcmp((0:100), CMP_lam[100, i], CMP_nu[100, i]))
sum((0:10)^2*dcmp((0:10)^2, CMP_lam[100, i], CMP_nu[100, i]))-
(sum((0:10)*dcmp((0:10), CMP_lam[100, i], CMP_nu[100, i])))^2
sum((0:10)^2*dcmp((0:10)^2, CMP_lam[100, i], CMP_nu[100, i]))-
(sum((0:100)*dcmp((0:100), CMP_lam[100, i], CMP_nu[100, i])))^2
sum((0:100)^2*dcmp((0:100)^2, CMP_lam[100, i], CMP_nu[100, i]))-
(sum((0:100)*dcmp((0:100), CMP_lam[100, i], CMP_nu[100, i])))^2
sum((0:100)^2*dcmp((0:100)^2, CMP_lam[100, i], CMP_nu[100, i]))-
(sum((0:200)*dcmp((0:200), CMP_lam[100, i], CMP_nu[100, i])))^2
(0:100)^2
sum((0:100)^2*dcmp((0:100)^2, CMP_lam[100, i], CMP_nu[100, i]))
(0:100)^2*dcmp((0:100)^2, CMP_lam[100, i], CMP_nu[100, i])
for(i in 1:ncol(Y)){
ff <- vcmp(CMP_lam[, i], CMP_nu[, i])/CMP_mean[, i]
# sum((0:100)^2*dcmp((0:100)^2, CMP_lam[100, i], CMP_nu[100, i]))-
#   (sum((0:200)*dcmp((0:200), CMP_lam[100, i], CMP_nu[100, i])))^2
# png(sprintf(paste0(wd, '/plots/img%03d.png'),i),
#     width = 600,height = 600)
plot(theta$V1, Y[, i], xlab = 'direction', ylab = 'y',
main = paste('trial =', i), ylim = range(Y))
lines(x0, CMP_mean[, i], col = 'red', lwd = 2)
lines(x0, ff, col = 'blue', lwd = 2)
abline(h = 1)
legend('topright', legend = c('mean', 'fano'),
lwd = 2, col = c('red', 'blue'))
# dev.off()
}
library(COMPoissonReg)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
Y <- read.csv(paste0(wd, '/ry.csv'), header = F)
X <- read.csv(paste0(wd, '/X.csv'), header = F)
newD <- read.csv(paste0(wd, '/basData.csv'), header = F)
theta <- read.csv(paste0(wd, '/theta.csv'), header = F)
x0 <- seq(0, 2*pi, length.out = 256)
CMP_mean <- matrix(NA, nrow = 256, ncol = ncol(Y))
CMP_lam <- matrix(NA, nrow = 256, ncol = ncol(Y))
CMP_nu <- matrix(NA, nrow = 256, ncol = ncol(Y))
CMP_beta <- matrix(NA, nrow = ncol(Y), ncol = ncol(X) + 1)
CMP_gamma <- matrix(NA, nrow = ncol(Y), ncol = ncol(X) + 1)
for(i in 1:ncol(Y)){
y <- Y[, i]
fitData <- data.frame(y, X)
cmpFit <- glm.cmp(y ~ .,
y ~ ., data = fitData)
CMP_beta[i, ] <- cmpFit$beta
CMP_gamma[i, ] <- cmpFit$gamma
CMP_mean[, i]<- predict(cmpFit, newdata=newD)
CMP_lam[, i] <- exp(as.matrix(cbind(1, newD)) %*% cmpFit$beta)
CMP_nu[, i] <- exp(as.matrix(cbind(1, newD)) %*% cmpFit$gamma)
}
save.image(paste0(wd, '/neuron16.RData'))
plot(CMP_beta[, 1], type = 'l')
plot(CMP_beta[, 2], type = 'l')
plot(CMP_beta[, 3], type = 'l')
plot(CMP_beta[, 4], type = 'l')
plot(CMP_beta[, 5], type = 'l')
plot(CMP_beta[, 6], type = 'l')
plot(CMP_gamma[, 1], type = 'l')
plot(CMP_gamma[, 2], type = 'l')
plot(CMP_gamma[, 3], type = 'l')
plot(CMP_gamma[, 4], type = 'l')
plot(CMP_gamma[, 5], type = 'l')
plot(CMP_gamma[, 6], type = 'l')
for(i in 1:ncol(Y)){
ff <- vcmp(CMP_lam[, i], CMP_nu[, i])/CMP_mean[, i]
# sum((0:100)^2*dcmp((0:100)^2, CMP_lam[100, i], CMP_nu[100, i]))-
#   (sum((0:200)*dcmp((0:200), CMP_lam[100, i], CMP_nu[100, i])))^2
# png(sprintf(paste0(wd, '/plots/img%03d.png'),i),
#     width = 600,height = 600)
plot(theta$V1, Y[, i], xlab = 'direction', ylab = 'y',
main = paste('trial =', i), ylim = range(Y))
lines(x0, CMP_mean[, i], col = 'red', lwd = 2)
lines(x0, ff, col = 'blue', lwd = 2)
abline(h = 1)
legend('topright', legend = c('mean', 'fano'),
lwd = 2, col = c('red', 'blue'))
# dev.off()
}
dirname(rstudioapi::getSourceEditorContext()$path)
library(COMPoissonReg)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
Y <- read.csv(paste0(wd, '/ry.csv'), header = F)
X <- read.csv(paste0(wd, '/X.csv'), header = F)
newD <- read.csv(paste0(wd, '/basData.csv'), header = F)
theta <- read.csv(paste0(wd, '/theta.csv'), header = F)
x0 <- seq(0, 2*pi, length.out = 256)
CMP_mean <- matrix(NA, nrow = 256, ncol = ncol(Y))
CMP_lam <- matrix(NA, nrow = 256, ncol = ncol(Y))
CMP_nu <- matrix(NA, nrow = 256, ncol = ncol(Y))
CMP_beta <- matrix(NA, nrow = ncol(Y), ncol = ncol(X) + 1)
CMP_gamma <- matrix(NA, nrow = ncol(Y), ncol = ncol(X) + 1)
for(i in 1:ncol(Y)){
y <- Y[, i]
fitData <- data.frame(y, X)
cmpFit <- glm.cmp(y ~ .,
y ~ ., data = fitData)
CMP_beta[i, ] <- cmpFit$beta
CMP_gamma[i, ] <- cmpFit$gamma
CMP_mean[, i]<- predict(cmpFit, newdata=newD)
CMP_lam[, i] <- exp(as.matrix(cbind(1, newD)) %*% cmpFit$beta)
CMP_nu[, i] <- exp(as.matrix(cbind(1, newD)) %*% cmpFit$gamma)
}
# save.image(paste0(wd, '/neuron72_v2.RData'))
##############
#### progression of parameters
plot(CMP_beta[, 1], type = 'l')
plot(CMP_beta[, 2], type = 'l')
plot(CMP_beta[, 3], type = 'l')
plot(CMP_beta[, 4], type = 'l')
plot(CMP_beta[, 5], type = 'l')
plot(CMP_beta[, 6], type = 'l')
plot(CMP_beta[, 7], type = 'l')
plot(CMP_beta[, 8], type = 'l')
plot(CMP_gamma[, 1], type = 'l')
plot(CMP_gamma[, 2], type = 'l')
plot(CMP_gamma[, 3], type = 'l')
plot(CMP_gamma[, 4], type = 'l')
plot(CMP_gamma[, 5], type = 'l')
plot(CMP_gamma[, 6], type = 'l')
plot(CMP_gamma[, 7], type = 'l')
plot(CMP_gamma[, 8], type = 'l')
myvcmp <- function(theta, maxSum = 200){
lam <- theta[1]
nu <- theta[2]
return(sum((0:maxSum)^2*dcmp((0:maxSum), lam, nu))-
(ecmp(lam, nu))^2)
}
FF <- matrix(NA, nrow = 256, ncol = ncol(Y))
for(i in 1:ncol(Y)){
ff <- apply(data.frame(CMP_lam[, i], CMP_nu[, i]),1, myvcmp)/
CMP_mean[, i]
FF[, i] <- ff
# png(sprintf(paste0(wd, '/plots/img%03d.png'),i),
#     width = 600,height = 600)
# plot(theta$V1, Y[, i], xlab = 'direction', ylab = 'y',
#      main = paste('trial =', i), ylim = range(Y))
# lines(x0, CMP_mean[, i], col = 'red', lwd = 2)
#
# lines(x0, ff, col = 'blue', lwd = 2)
# abline(h = 1)
# legend('topright', legend = c('mean', 'fano'),
#        lwd = 2, col = c('red', 'blue'))
# dev.off()
}
plot(FF[1, ], type = 'l', col = 1, ylim = range(FF))
for(j in seq(2, 256, 1)){
lines(FF[j, ], type = 'l', col = j)
}
plot(CMP_mean[1, ], type = 'l', col = 1, ylim = range(CMP_mean))
for(j in 1:256){
lines(CMP_mean[j, ], type = 'l', col = j)
}
library(COMPoissonReg)
# wd <- dirname(rstudioapi::getSourceEditorContext()$path)
wd <- "D:/GitHub/COM_POISSON/runRcode"
d <- read.csv(paste0(wd, '/fitData.csv'), header = F)
y <- d[, 1]
X <- d[, 2:ncol(d)]
fitData <- data.frame(y, X)
cmpFit <- glm.cmp(y ~ .,
y ~ ., data = fitData)
beta <- cmpFit$beta
gam <- cmpFit$gamma
plot(nu(cmpFit))
beta <- cmpFit$beta
gam <- cmpFit$gamma
beta
gam
write.csv(data.frame(beta, gam),
file = paste0(wd, '/cmp_t1.csv'))
