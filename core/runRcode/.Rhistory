newD <- read.csv(paste0(wd, '/basData.csv'), header = F)
theta <- read.csv(paste0(wd, '/theta.csv'), header = F)
x0 <- seq(0, 2*pi, length.out = 256)
CMP_mean <- matrix(NA, nrow = 256, ncol = ncol(Y))
CMP_lam <- matrix(NA, nrow = 256, ncol = ncol(Y))
CMP_nu <- matrix(NA, nrow = 256, ncol = ncol(Y))
CMP_beta <- matrix(NA, nrow = ncol(Y), ncol = ncol(X) + 1)
CMP_gamma <- matrix(NA, nrow = ncol(Y), ncol = ncol(X) + 1)
for(i in 1:ncol(Y)){
y <- Y[, i]
fitData <- data.frame(y, X)
cmpFit <- glm.cmp(y ~ .,
y ~ ., data = fitData)
CMP_beta[i, ] <- cmpFit$beta
CMP_gamma[i, ] <- cmpFit$gamma
CMP_mean[, i]<- predict(cmpFit, newdata=newD)
CMP_lam[, i] <- exp(as.matrix(cbind(1, newD)) %*% cmpFit$beta)
CMP_nu[, i] <- exp(as.matrix(cbind(1, newD)) %*% cmpFit$gamma)
}
save.image(paste0(wd, '/neuron16.RData'))
plot(CMP_beta[, 1], type = 'l')
plot(CMP_beta[, 2], type = 'l')
plot(CMP_beta[, 3], type = 'l')
plot(CMP_beta[, 4], type = 'l')
plot(CMP_beta[, 5], type = 'l')
plot(CMP_beta[, 6], type = 'l')
plot(CMP_gamma[, 1], type = 'l')
plot(CMP_gamma[, 2], type = 'l')
plot(CMP_gamma[, 3], type = 'l')
plot(CMP_gamma[, 4], type = 'l')
plot(CMP_gamma[, 5], type = 'l')
plot(CMP_gamma[, 6], type = 'l')
for(i in 1:ncol(Y)){
ff <- vcmp(CMP_lam[, i], CMP_nu[, i])/CMP_mean[, i]
# sum((0:100)^2*dcmp((0:100)^2, CMP_lam[100, i], CMP_nu[100, i]))-
#   (sum((0:200)*dcmp((0:200), CMP_lam[100, i], CMP_nu[100, i])))^2
# png(sprintf(paste0(wd, '/plots/img%03d.png'),i),
#     width = 600,height = 600)
plot(theta$V1, Y[, i], xlab = 'direction', ylab = 'y',
main = paste('trial =', i), ylim = range(Y))
lines(x0, CMP_mean[, i], col = 'red', lwd = 2)
lines(x0, ff, col = 'blue', lwd = 2)
abline(h = 1)
legend('topright', legend = c('mean', 'fano'),
lwd = 2, col = c('red', 'blue'))
# dev.off()
}
dirname(rstudioapi::getSourceEditorContext()$path)
library(COMPoissonReg)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
Y <- read.csv(paste0(wd, '/ry.csv'), header = F)
X <- read.csv(paste0(wd, '/X.csv'), header = F)
newD <- read.csv(paste0(wd, '/basData.csv'), header = F)
theta <- read.csv(paste0(wd, '/theta.csv'), header = F)
x0 <- seq(0, 2*pi, length.out = 256)
CMP_mean <- matrix(NA, nrow = 256, ncol = ncol(Y))
CMP_lam <- matrix(NA, nrow = 256, ncol = ncol(Y))
CMP_nu <- matrix(NA, nrow = 256, ncol = ncol(Y))
CMP_beta <- matrix(NA, nrow = ncol(Y), ncol = ncol(X) + 1)
CMP_gamma <- matrix(NA, nrow = ncol(Y), ncol = ncol(X) + 1)
for(i in 1:ncol(Y)){
y <- Y[, i]
fitData <- data.frame(y, X)
cmpFit <- glm.cmp(y ~ .,
y ~ ., data = fitData)
CMP_beta[i, ] <- cmpFit$beta
CMP_gamma[i, ] <- cmpFit$gamma
CMP_mean[, i]<- predict(cmpFit, newdata=newD)
CMP_lam[, i] <- exp(as.matrix(cbind(1, newD)) %*% cmpFit$beta)
CMP_nu[, i] <- exp(as.matrix(cbind(1, newD)) %*% cmpFit$gamma)
}
# save.image(paste0(wd, '/neuron72_v2.RData'))
##############
#### progression of parameters
plot(CMP_beta[, 1], type = 'l')
plot(CMP_beta[, 2], type = 'l')
plot(CMP_beta[, 3], type = 'l')
plot(CMP_beta[, 4], type = 'l')
plot(CMP_beta[, 5], type = 'l')
plot(CMP_beta[, 6], type = 'l')
plot(CMP_beta[, 7], type = 'l')
plot(CMP_beta[, 8], type = 'l')
plot(CMP_gamma[, 1], type = 'l')
plot(CMP_gamma[, 2], type = 'l')
plot(CMP_gamma[, 3], type = 'l')
plot(CMP_gamma[, 4], type = 'l')
plot(CMP_gamma[, 5], type = 'l')
plot(CMP_gamma[, 6], type = 'l')
plot(CMP_gamma[, 7], type = 'l')
plot(CMP_gamma[, 8], type = 'l')
myvcmp <- function(theta, maxSum = 200){
lam <- theta[1]
nu <- theta[2]
return(sum((0:maxSum)^2*dcmp((0:maxSum), lam, nu))-
(ecmp(lam, nu))^2)
}
FF <- matrix(NA, nrow = 256, ncol = ncol(Y))
for(i in 1:ncol(Y)){
ff <- apply(data.frame(CMP_lam[, i], CMP_nu[, i]),1, myvcmp)/
CMP_mean[, i]
FF[, i] <- ff
# png(sprintf(paste0(wd, '/plots/img%03d.png'),i),
#     width = 600,height = 600)
# plot(theta$V1, Y[, i], xlab = 'direction', ylab = 'y',
#      main = paste('trial =', i), ylim = range(Y))
# lines(x0, CMP_mean[, i], col = 'red', lwd = 2)
#
# lines(x0, ff, col = 'blue', lwd = 2)
# abline(h = 1)
# legend('topright', legend = c('mean', 'fano'),
#        lwd = 2, col = c('red', 'blue'))
# dev.off()
}
plot(FF[1, ], type = 'l', col = 1, ylim = range(FF))
for(j in seq(2, 256, 1)){
lines(FF[j, ], type = 'l', col = j)
}
plot(CMP_mean[1, ], type = 'l', col = 1, ylim = range(CMP_mean))
for(j in 1:256){
lines(CMP_mean[j, ], type = 'l', col = j)
}
library(COMPoissonReg)
# wd <- dirname(rstudioapi::getSourceEditorContext()$path)
wd <- "D:/GitHub/COM_POISSON/runRcode"
d <- read.csv(paste0(wd, '/fitData.csv'), header = F)
y <- d[, 1]
X <- d[, 2:ncol(d)]
fitData <- data.frame(y, X)
cmpFit <- glm.cmp(y ~ .,
y ~ ., data = fitData)
beta <- cmpFit$beta
gam <- cmpFit$gamma
plot(nu(cmpFit))
beta <- cmpFit$beta
gam <- cmpFit$gamma
beta
gam
write.csv(data.frame(beta, gam),
file = paste0(wd, '/cmp_t1.csv'))
library(COMPoissonReg)
wd <- "D:/GitHub/COM_POISSON/runRcode"
y <- read.csv(paste0(wd, '/y.csv'), header = F)
y <- read.csv(paste0(wd, '/y.csv'), header = F)
X <- read.csv(paste0(wd, '/X.csv'), header = F)
G <- read.csv(paste0(wd, '/G.csv'), header = F)
G <- read.csv(paste0(wd, '/G.csv'), header = F)
y <- read.csv(paste0(wd, '/y.csv'), header = F)
X <- read.csv(paste0(wd, '/X.csv'), header = F)
G <- read.csv(paste0(wd, '/G.csv'), header = F)
G
X
ncol(X)
if(ncol(X) > 1){X <- X[, 2:ncol(X)]}
if(ncol(G) > 1){G <- G[, 2:ncol(G)]}
glm.cmp(y ~ X)
y
X
glm.cmp(y ~ data.frame(X))
list(y)
View(y)
glm.cmp(list(y) ~ data.frame(X))
?glm.cmp
glm.cmp(data.frame(y) ~ data.frame(X))
?glm
glm(y ~ X, family = 'poisson')
as.formula('y ~ X')
glm(as.formula('y ~ X'), family = 'poisson')
gl(X)
?gl
model.matrix(y ~ X)
model.matrix( ~ X)
model.matrix(~ X)
model.matrix(~ data.frame(X))
data.frame(X)
glm(y ~ X$V2, family = 'poisson')
data.frame(y, X, G)
fitData <- data.frame(y, X, G)
names(fitData)
fitData <- data.frame(y = y, X = X, G = G)
names(fitData)
ncol(X)
paste("x", 1:ncol(X), sep="")
names(fitData)[2:(ncol(X) + 1)] <- paste("x", 1:ncol(X), sep="")
paste("g", 1:ncol(G), sep="")
fitData <- data.frame(y = y, X = X, G = G)
names(fitData)[1] <- 'y'
names(fitData)[2:(ncol(X) + 1)] <- paste("x", 1:ncol(X), sep="")
names(fitData)[(ncol(X) + 2):ncol(fitData)] <- paste("g", 1:ncol(G), sep="")
names(fitData)
fitData <- data.frame(y = y, X = X, G = G)
xnam <- paste("x", 1:ncol(X), sep="")
gnam <- paste("g", 1:ncol(G), sep="")
names(fitData)[1] <- 'y'
names(fitData)[2:(ncol(X) + 1)] <- xnam
names(fitData)[(ncol(X) + 2):ncol(fitData)] <- gnam
as.formula(paste('y~'),
paste(xnam, collapse= "+"))
as.formula(paste('y~',
paste(xnam, collapse= "+")))
fmlaG <- as.formula(paste('y~',
paste(gnam, collapse= "+")))
fmlaX <- as.formula(paste('y~',
paste(xnam, collapse= "+")))
fmlaG <- as.formula(paste('y~',
paste(gnam, collapse= "+")))
glm(fmlaX, family = 'poisson')
glm(fmlaX, family = 'poisson', data = fitData)
glm(fmlaG, family = 'poisson', data = fitData)
gnam
xnam
library(COMPoissonReg)
# wd <- dirname(rstudioapi::getSourceEditorContext()$path)
wd <- "D:/GitHub/COM_POISSON/runRcode"
y <- read.csv(paste0(wd, '/y.csv'), header = F)
X <- read.csv(paste0(wd, '/X.csv'), header = F)
G <- read.csv(paste0(wd, '/G.csv'), header = F)
X <- X[, 2:ncol(X)]
G <- G[, 2:ncol(G)]
ncol(G)
ifelse(ncol(X) > 1, X[, 2:ncol(X)], NA)
ifelse(ncol(G) > 1, X[, 2:ncol(G)], NA)
X <- ifelse(ncol(X) > 1, X[, 2:ncol(X)], NA)
G <- ifelse(ncol(G) > 1, X[, 2:ncol(G)], NA)
G
fitData <- data.frame(y = y, X = X, G = G)
fitData
fitData <- data.frame(y = y, X = X, G = G)
xnam <- paste("x", 1:ncol(X), sep="")
gnam <- paste("g", 1:ncol(G), sep="")
names(fitData)[1] <- 'y'
names(fitData)[2:(ncol(X) + 1)] <- xnam
names(fitData)[(ncol(X) + 2):ncol(fitData)] <- gnam
ncol(G)
# wd <- dirname(rstudioapi::getSourceEditorContext()$path)
wd <- "D:/GitHub/COM_POISSON/runRcode"
y <- read.csv(paste0(wd, '/y.csv'), header = F)
X <- read.csv(paste0(wd, '/X.csv'), header = F)
G <- read.csv(paste0(wd, '/G.csv'), header = F)
fitData <- data.frame(y = y, X = X, G = G)
xnam <- paste("x", 0:ncol(X), sep="")
gnam <- paste("g", 0:ncol(G), sep="")
names(fitData)[1] <- 'y'
names(fitData)[2:(ncol(X) + 1)] <- xnam
fitData <- data.frame(y = y, X = X, G = G)
xnam <- paste("x", 0:ncol(X), sep="")
gnam <- paste("g", 0:ncol(G), sep="")
names(fitData)
xnam
0:ncol(X)-1
fitData <- data.frame(y = y, X = X, G = G)
xnam <- paste("x", 0:(ncol(X)-1), sep="")
gnam <- paste("g", 0:(ncol(G)-1), sep="")
names(fitData)
names(fitData)[1] <- 'y'
names(fitData)[2:(ncol(X) + 1)]
names(fitData)[2:ncol(X)] <- xnam
2:ncol(X)
xnam
fitData <- data.frame(y = y, X = X, G = G)
xnam <- paste("x", 0:(ncol(X)-1), sep="")
gnam <- paste("g", 0:(ncol(G)-1), sep="")
names(fitData)[1] <- 'y'
names(fitData)[2:(ncol(X) + 1)] <- xnam
names(fitData)
xnam
gnam
names(fitData)[(ncol(X) + 2):ncol(fitData)] <- gnam
names(fitData)
ifelse(length(gnam) > 1, gnam, 1)
ifelse(length(xnam) > 1, xnam, 1)
xnam
length(xnam)
xnam
ifelse(length(xnam) > 1, xnam, 1)
if(length(xnam) > 1){xnam}
if(length(xnam) > 1){xnam2 <- xnam}else{xnam2 <- 1}
xnam2
if(length(gnam) > 1){gnam2 <- xnam}else{gnam2 <- 1}
gnam2
fmlaX <- as.formula(paste('y~',
paste(xnam2, collapse= "+")))
fmlaG <- as.formula(paste('y~',
paste(gnam2, collapse= "+")))
glm(fmlaG, family = 'poisson', data = fitData)
cmpFit <- glm.cmp(fmlaX,
fmlaG, data = fitData)
cmpFit <- glm.cmp(fmlaX,
fmlaX, data = fitData)
fmlaX
fmlaX
gnam2
xnam[-1]
wd <- "D:/GitHub/COM_POISSON/runRcode"
y <- read.csv(paste0(wd, '/y.csv'), header = F)
X <- read.csv(paste0(wd, '/X.csv'), header = F)
G <- read.csv(paste0(wd, '/G.csv'), header = F)
fitData <- data.frame(y = y, X = X, G = G)
xnam <- paste("x", 0:(ncol(X)-1), sep="")
gnam <- paste("g", 0:(ncol(G)-1), sep="")
names(fitData)[1] <- 'y'
names(fitData)[2:(ncol(X) + 1)] <- xnam
names(fitData)[(ncol(X) + 2):ncol(fitData)] <- gnam
if(length(xnam) > 1){xnam2 <- xnam[-1]}else{xnam2 <- 1}
if(length(gnam) > 1){gnam2 <- gnam[-1]}else{gnam2 <- 1}
fmlaX <- as.formula(paste('y~',
paste(xnam2, collapse= "+")))
fmlaG <- as.formula(paste('y~',
paste(gnam2, collapse= "+")))
fmlaX
fmlaG
cmpFit <- glm.cmp(fmlaX,
fmlaG, data = fitData)
beta <- cmpFit$beta
gam <- cmpFit$gamma
beta
gam
data.frame(beta, gam)
rbind(beta, gam)
cbind(beta, gam)
c(beta, gam)
write.csv(c(beta, gam),
file = paste0(wd, '/cmp_t1.csv'))
beta <- unname(cmpFit$beta)
gam <- unname(cmpFit$gamma)
c(beta, gam)
write.csv(c(beta, gam),
file = paste0(wd, '/cmp_t1.csv'))
?write.csv
write.csv(c(beta, gam),
file = paste0(wd, '/cmp_t1.csv'), row.names = F)
library(COMPoissonReg)
wd <- "D:/GitHub/COM_POISSON/demo/hc"
######
y <- read.csv(paste0(wd, '/y.csv'), header = F)
X <- read.csv(paste0(wd, '/X.csv'), header = F)
G <- read.csv(paste0(wd, '/G.csv'), header = F)
fitData <- data.frame(y = y, X = X, G = G)
xnam <- paste("x", 0:(ncol(X)-1), sep="")
gnam <- paste("g", 0:(ncol(G)-1), sep="")
names(fitData)[1] <- 'y'
names(fitData)[2:(ncol(X) + 1)] <- xnam
names(fitData)[(ncol(X) + 2):ncol(fitData)] <- gnam
if(length(xnam) > 1){xnam2 <- xnam[-1]}else{xnam2 <- 1}
if(length(gnam) > 1){gnam2 <- gnam[-1]}else{gnam2 <- 1}
fmlaX <- as.formula(paste('y~',
paste(xnam2, collapse= "+")))
fmlaG <- as.formula(paste('y~',
paste(gnam2, collapse= "+")))
cmpFit <- glm.cmp(fmlaX,
fmlaG, data = fitData)
beta <- unname(cmpFit$beta)
gam <- unname(cmpFit$gamma)
write.csv(c(beta, gam),
file = paste0(wd, '/cmp_t1.csv'), row.names = F)
library(COMPoissonReg)
# wd <- dirname(rstudioapi::getSourceEditorContext()$path)
# wd <- "D:/GitHub/COM_POISSON/runRcode"
wd <- "C:/Users/gaw19004/Documents/GitHub/COM_POISSON/runRcode"
y <- read.csv(paste0(wd, '/y.csv'), header = F)
X <- read.csv(paste0(wd, '/X.csv'), header = F)
G <- read.csv(paste0(wd, '/G.csv'), header = F)
y
X
fitData <- data.frame(y = y, X = X, G = G)
xnam <- paste("x", 0:(ncol(X)-1), sep="")
gnam <- paste("g", 0:(ncol(G)-1), sep="")
names(fitData)[1] <- 'y'
names(fitData)[2:(ncol(X) + 1)] <- xnam
names(fitData)[(ncol(X) + 2):ncol(fitData)] <- gnam
if(length(xnam) > 1){xnam2 <- xnam[-1]}else{xnam2 <- 1}
if(length(gnam) > 1){gnam2 <- gnam[-1]}else{gnam2 <- 1}
fmlaX <- as.formula(paste('y~',
paste(xnam2, collapse= "+")))
fmlaG <- as.formula(paste('y~',
paste(gnam2, collapse= "+")))
fmlaX
fmlaG
fitData
cmpFit <- glm.cmp(fmlaX,
fmlaG, data = fitData)
fmlaX
View(fitData)
wd <- "C:/Users/gaw19004/Documents/GitHub/COM_POISSON/runRcode"
y <- read.csv(paste0(wd, '/y.csv'), header = F)
X <- read.csv(paste0(wd, '/X.csv'), header = F)
G <- read.csv(paste0(wd, '/G.csv'), header = F)
fitData <- data.frame(y = y, X = X, G = G)
xnam <- paste("x", 0:(ncol(X)-1), sep="")
gnam <- paste("g", 0:(ncol(G)-1), sep="")
names(fitData)[1] <- 'y'
names(fitData)[2:(ncol(X) + 1)] <- xnam
names(fitData)[(ncol(X) + 2):ncol(fitData)] <- gnam
if(length(xnam) > 1){xnam2 <- xnam[-1]}else{xnam2 <- 1}
if(length(gnam) > 1){gnam2 <- gnam[-1]}else{gnam2 <- 1}
fmlaX <- as.formula(paste('y~',
paste(xnam2, collapse= "+")))
fmlaG <- as.formula(paste('y~',
paste(gnam2, collapse= "+")))
fmlaX
fmlaG
glm.cmp(fmlaX,
fmlaG, data = fitData)
y <- read.csv(paste0(wd, '/y.csv'), header = F)
X <- read.csv(paste0(wd, '/X.csv'), header = F)
G <- read.csv(paste0(wd, '/G.csv'), header = F)
fitData <- data.frame(y = y, X = X, G = G)
xnam <- paste("x", 0:(ncol(X)-1), sep="")
gnam <- paste("g", 0:(ncol(G)-1), sep="")
names(fitData)[1] <- 'y'
names(fitData)[2:(ncol(X) + 1)] <- xnam
names(fitData)[(ncol(X) + 2):ncol(fitData)] <- gnam
if(length(xnam) > 1){xnam2 <- xnam[-1]}else{xnam2 <- 1}
if(length(gnam) > 1){gnam2 <- gnam[-1]}else{gnam2 <- 1}
fmlaX <- as.formula(paste('y~',
paste(xnam2, collapse= "+")))
fmlaG <- as.formula(paste('y~',
paste(gnam2, collapse= "+")))
cmpFit <- glm.cmp(fmlaX,
fmlaG, data = fitData)
beta <- unname(cmpFit$beta)
gam <- unname(cmpFit$gamma)
y <- read.csv(paste0(wd, '/y.csv'), header = F)
X <- read.csv(paste0(wd, '/X.csv'), header = F)
G <- read.csv(paste0(wd, '/G.csv'), header = F)
fitData <- data.frame(y = y, X = X, G = G)
xnam <- paste("x", 0:(ncol(X)-1), sep="")
gnam <- paste("g", 0:(ncol(G)-1), sep="")
names(fitData)[1] <- 'y'
names(fitData)[2:(ncol(X) + 1)] <- xnam
names(fitData)[(ncol(X) + 2):ncol(fitData)] <- gnam
if(length(xnam) > 1){xnam2 <- xnam[-1]}else{xnam2 <- 1}
if(length(gnam) > 1){gnam2 <- gnam[-1]}else{gnam2 <- 1}
fmlaX <- as.formula(paste('y~',
paste(xnam2, collapse= "+")))
fmlaG <- as.formula(paste('y~',
paste(gnam2, collapse= "+")))
View(y)
cmpFit <- glm.cmp(fmlaX,
fmlaG, data = fitData)
devtools::install_github("lotze/COMPoissonReg", ref = "v0.7.1")
library(COMPoissonReg)
?glm.cmp
glm.cmp(fmlaX,, data = fitData)
library(COMPoissonReg)
# wd <- "D:/GitHub/COM_POISSON/demo/hc"
wd <- "C:/Users/gaw19004/Documents/GitHub/COM_POISSON/demo/hc"
######
y <- read.csv(paste0(wd, '/y.csv'), header = F)
X <- read.csv(paste0(wd, '/X.csv'), header = F)
G <- read.csv(paste0(wd, '/G.csv'), header = F)
fitData <- data.frame(y = y, X = X, G = G)
xnam <- paste("x", 0:(ncol(X)-1), sep="")
gnam <- paste("g", 0:(ncol(G)-1), sep="")
names(fitData)[1] <- 'y'
names(fitData)[2:(ncol(X) + 1)] <- xnam
names(fitData)[(ncol(X) + 2):ncol(fitData)] <- gnam
if(length(xnam) > 1){xnam2 <- xnam[-1]}else{xnam2 <- 1}
if(length(gnam) > 1){gnam2 <- gnam[-1]}else{gnam2 <- 1}
fmlaX <- as.formula(paste('y~',
paste(xnam2, collapse= "+")))
fmlaG <- as.formula(paste('y~',
paste(gnam2, collapse= "+")))
cmpFit <- glm.cmp(fmlaX, fmlaG, data = fitData)
beta <- unname(cmpFit$beta)
gam <- unname(cmpFit$gamma)
cmpFit
cmpFit$beta.glm
unname(cmpFit$beta)
unname(cmpFit$gamma)
cmpFit$X
summary(cmpFit)
cmpFit$DF
View(cmpFit)
anova(cmpFit)
aov(cmpFit)
summary(cmpFit)$DF
summary(cmpFit)$DF$SE
getwd()
y <- read.csv(paste0(wd, '/y.csv'), header = F)
X <- read.csv(paste0(wd, '/X.csv'), header = F)
G <- read.csv(paste0(wd, '/G.csv'), header = F)
getwd()
wd <- getwd()
y <- read.csv(paste0(wd, '/y.csv'), header = F)
X <- read.csv(paste0(wd, '/X.csv'), header = F)
G <- read.csv(paste0(wd, '/G.csv'), header = F)
library(COMPoissonReg)
# wd <- dirname(rstudioapi::getSourceEditorContext()$path)
# wd <- "D:/GitHub/COM_POISSON/runRcode"
wd <- getwd()
y <- read.csv(paste0(wd, '/y.csv'), header = F)
X <- read.csv(paste0(wd, '/X.csv'), header = F)
G <- read.csv(paste0(wd, '/G.csv'), header = F)
fitData <- data.frame(y = y, X = X, G = G)
xnam <- paste("x", 0:(ncol(X)-1), sep="")
gnam <- paste("g", 0:(ncol(G)-1), sep="")
names(fitData)[1] <- 'y'
names(fitData)[2:(ncol(X) + 1)] <- xnam
names(fitData)[(ncol(X) + 2):ncol(fitData)] <- gnam
if(length(xnam) > 1){xnam2 <- xnam[-1]}else{xnam2 <- 1}
if(length(gnam) > 1){gnam2 <- gnam[-1]}else{gnam2 <- 1}
fmlaX <- as.formula(paste('y~',
paste(xnam2, collapse= "+")))
fmlaG <- as.formula(paste('y~',
paste(gnam2, collapse= "+")))
cmpFit <- glm.cmp(fmlaX,
fmlaG, data = fitData)
beta <- unname(cmpFit$beta)
gam <- unname(cmpFit$gamma)
write.csv(c(beta, gam),
file = paste0(wd, '/cmp_t1.csv'), row.names = F)
getwd()
